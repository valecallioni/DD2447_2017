boxplot.matrix(likelihood, xlab = "Beta values", ylab = "Log-likelihood", main = "SMC without resampling", names = round(beta, digit=2))
beta = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
likelihood = NULL
for (k in 1:10){
l = NULL
# l = sapply(beta, estimateLikelihood, y=y)
for (b in beta){
temp = estimateLikelihoodResampl(b,y)
while (temp[2]<100){
temp = estimateLikelihoodResampl(b,y)
}
l = c(l, temp[1])
}
likelihood = rbind(likelihood, l)
}
x11()
boxplot.matrix(likelihood, xlab = "Beta values", ylab = "Log-likelihood", main = "SMC with resampling", names = round(beta, digit=2))
source("task5_functions.R")
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task5")
source("task5_functions.R")
library(invgamma)
library(pscl)
library(ggplot2)
T = 500
N = 10000
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma = 0.1315
X_smc = smc_tot(sigma0, phi, T)
sigma0 = 0.1315
X_smc = smc_tot(sigma0, phi, T)
source("task5_functions.R")
T = 500
N = 10000
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
sigma0 = 0.1315
X_smc = smc_tot(sigma0, phi, T)
N = 100
for (i in 1:N){
sigma = update_sigma2(X_smc[T+1,], phi, T)
sigma2 = c(sigma2, sigma)
x = smc(X_smc, i, sigma, phi, T)
X_smc[,i] = x
beta = update_beta2(x, y[,1], T)
beta2 = c(beta2, beta)
}
i=1
X_smc[,i]
X_smc[,i] = x
sigma0 = 0.1315
X_smc = smc_tot(sigma0, phi, T)
# Gibbs sampling
for (i in 1:N){
sigma = update_sigma2(X_smc[T+1,], phi, T)
sigma2 = c(sigma2, sigma)
x = smc(X_smc, i, sigma, phi, T)
beta = update_beta2(x, y[,1], T)
beta2 = c(beta2, beta)
}
i=1
T = 500
N = 100
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma0 = 0.1315
X_smc = smc_tot(sigma0, phi, T)
sigma = update_sigma2(X_smc[T+1,], phi, T)
View(X_smc)
sigma0 = 0.1315
for (i in 1:N){
sigma = update_sigma2(X_smc[,i], phi, T)
sigma2 = c(sigma2, sigma)
x = smc(X_smc, i, sigma, phi, T)
X_smc[,i] = x
beta = update_beta2(x, y[,1], T)
beta2 = c(beta2, beta)
}
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task1")
source("task1_functions.R")
beta = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
likelihood = NULL
for (k in 1:10){
l = NULL
# l = sapply(beta, estimateLikelihood, y=y)
for (b in beta){
temp = estimateLikelihood(b,y)
while (temp[2]<100){
temp = estimateLikelihood(b,y)
}
l = c(l, temp[1])
}
likelihood = rbind(likelihood, l)
}
x11()
boxplot.matrix(likelihood, xlab = "Beta values", ylab = "Log-likelihood", main = "SMC without resampling", names = round(beta, digit=2))
beta = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
likelihood = NULL
for (k in 1:10){
l = NULL
# l = sapply(beta, estimateLikelihood, y=y)
for (b in beta){
temp = estimateLikelihood(b,y)
while (temp[2]<100){
temp = estimateLikelihood(b,y)
}
l = c(l, temp[1])
}
likelihood = rbind(likelihood, l)
}
x11()
boxplot.matrix(likelihood, xlab = "Beta values", ylab = "Log-likelihood", main = "SMC without resampling", names = round(beta, digit=2))
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task1")
source("task1_functions.R")
y = read.table("output.txt")
beta = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2)
likelihood = NULL
for (k in 1:10){
l = NULL
# l = sapply(beta, estimateLikelihood, y=y)
for (b in beta){
temp = estimateLikelihood(b,y)
while (temp[2]<100){
temp = estimateLikelihood(b,y)
}
l = c(l, temp[1])
}
likelihood = rbind(likelihood, l)
}
?seq
beta = seq(0.1, 2, length.out = 10)
likelihood = NULL
for (k in 1:10){
l = NULL
# l = sapply(beta, estimateLikelihood, y=y)
for (b in beta){
temp = estimateLikelihood(b,y)
while (temp[2]<100){
temp = estimateLikelihood(b,y)
}
l = c(l, temp[1])
}
likelihood = rbind(likelihood, l)
}
x11()
boxplot.matrix(likelihood, xlab = "Beta values", ylab = "Log-likelihood", main = "SMC without resampling", names = round(beta, digit=2))
likelihood = NULL
for (k in 1:10){
l = NULL
# l = sapply(beta, estimateLikelihood, y=y)
for (b in beta){
temp = estimateLikelihoodResampl(b,y)
while (temp[2]<100){
temp = estimateLikelihoodResampl(b,y)
}
l = c(l, temp[1])
}
likelihood = rbind(likelihood, l)
}
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task1")
source("task1_functions.R")
y = read.table("output.txt")
# beta = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2)
beta = seq(0.1, 2, length.out = 20)
likelihood = NULL
for (k in 1:10){
l = NULL
# l = sapply(beta, estimateLikelihood, y=y)
for (b in beta){
temp = estimateLikelihood(b,y)
while (temp[2]<100){
temp = estimateLikelihood(b,y)
}
l = c(l, temp[1])
}
likelihood = rbind(likelihood, l)
}
x11()
boxplot.matrix(likelihood, xlab = "Beta values", ylab = "Log-likelihood", main = "SMC without resampling", names = round(beta, digit=2))
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task1")
source("task1_functions.R")
y = read.table("output.txt")
#beta = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2)
beta = seq(0.1, 2, length.out = 20)
likelihood = NULL
for (k in 1:10){
l = NULL
# l = sapply(beta, estimateLikelihood, y=y)
for (b in beta){
temp = estimateLikelihoodResampl(b,y)
while (temp[2]<100){
temp = estimateLikelihoodResampl(b,y)
}
l = c(l, temp[1])
}
likelihood = rbind(likelihood, l)
}
x11()
boxplot.matrix(likelihood, xlab = "Beta values", ylab = "Log-likelihood", main = "SMC with resampling", names = round(beta, digit=2))
?runif
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task5")
source("task5_functions.R")
library(invgamma)
library(pscl)
library(ggplot2)
T = 500
N = 100
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
sigma0 = 0.1315
X_smc = smc_tot(sigma0, phi, T)
i=1
sigma = update_sigma2(X_smc[,i], phi, T)
sigma2 = c(sigma2, sigma)
j = runif(1, 1, 100)
x = smc(X_smc, i, sigma, phi, T, j)
beta = update_beta2(x, y[,1], T)
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task5")
source("task5_functions.R")
T = 500
N = 100
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma0 = 0.1315
X_smc = smc_tot(sigma0, phi, T)
T = 500
N = 100
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma0 = 0.1315
X_smc = smc_tot(sigma0, phi, T)
T = 500
N = 100
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
sigma0 = 0.1315
X_smc = smc_tot(sigma0, phi, T)
sigma = sigma0
N = 100
X = NULL # N columns, T+1 rows --> a particle path is a column
u = array(0,N)
u[1] = runif(1, 0, 1/N)
u[2:N] = sapply(2:N, generateU, u1=u[1], N=N)
# Time t = 1
x0 = rnorm(N, 0, sqrt(sigma^2/(1-phi^2)))
X = rbind(X, x0)
# Sampling N times, looking at x0 values
x_old = sapply(phi*x0, normalSamplingX, sigma=sigma)
p1 = sum(mapply(dnorm, x_old, phi*x0, sd=sqrt((sigma^2/(1-phi^2)))) * dnorm(x0,  0, sqrt(sigma^2/(1-phi^2))))
alpha = dnorm(y[1,1], 0, sqrt((beta^2)*exp(x_old))) * p1
w_old = alpha
W_old = w_old/sum(w_old)
offspring = array(0,length(w_old))
x_new = NULL
for (i in 1:N){
if (i==1)
lower = 0
else
lower = sum(W_old[1:(i-1)])
upper = sum(W_old[1:i])
count = length(which(u>=lower & u<=upper))
offspring[i] = count
if (count > 0){
x_new = c(x_new, rep(x_old[i], offspring[i]))
}
}
X = rbind(X, x_new)
if (!is.null(x_new)){
p1 = sum(mapply(dnorm, x_new, phi*x0, sd=sqrt((sigma^2/(1-phi^2)))) * dnorm(x0,  0, sqrt(sigma^2/(1-phi^2))))
alpha = dnorm(y[1,1], 0, sqrt((beta^2)*exp(x_new)))
w_new = alpha*p1
W_new = w_new/sum(w_new)
}
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task5")
source("task5_functions.R")
library(invgamma)
library(pscl)
library(ggplot2)
T = 500
N = 1000
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma = 0.1315
beta = 0.63715
X_smc = smc_tot(sigma, phi, beta, T)
# Gibbs sampling
for (i in 1:N){
sigma = sqrt(update_sigma2(X_smc[,i], phi, T))
sigma2 = c(sigma2, sigma)
j = sample(1:N, 1)
x = smc(X_smc, i, sigma, phi, beta, T, j)
beta = sqrt(update_beta2(x, y[,1], T))
beta2 = c(beta2, beta)
}
x11()
qplot(sigma2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Sigma")
x11()
qplot(beta2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Beta")
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task5")
source("task5_functions.R")
T = 500
N = 1000
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma = 0.1315
beta = 0.63715
X_smc = smc_tot(sigma, phi, beta, T)
# Gibbs sampling
for (i in 1:N){
sigma = sqrt(update_sigma2(X_smc[,i], phi, T))
sigma2 = c(sigma2, sigma)
j = sample(1:N, 1)
x = smc(X_smc, i, sigma, phi, beta, T, j)
beta = sqrt(update_beta2(x, y[,1], T))
beta2 = c(beta2, beta)
}
x11()
qplot(sigma2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Sigma")
qplot(beta2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Beta")
T = 500
N = 1000
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma = 0.1315
beta = 0.63715
X_smc = smc_tot(sigma, phi, beta, T)
# Gibbs sampling
for (i in 1:N){
j = sample(1:N, 1)
x = smc(X_smc, i, sigma, phi, beta, T, j)
sigma = sqrt(update_sigma2(x, phi, T))
sigma2 = c(sigma2, sigma)
beta = sqrt(update_beta2(x, y[,1], T))
beta2 = c(beta2, beta)
}
x11()
qplot(sigma2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Sigma")
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task5")
source("task5_functions.R")
library(invgamma)
library(pscl)
library(ggplot2)
T = 500
N = 1000
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma = 0.1315
beta = 0.63715
X_smc = smc_tot(sigma, phi, beta, T)
j = sample(1:N, 1)
x = X_smc[,j]
dim(X_smc)
for (i in 1:N){
sigma = sqrt(update_sigma2(x, phi, T))
sigma2 = c(sigma2, sigma^2)
j = sample(1:N, 1)
x = smc(X_smc, i, sigma, phi, beta, T, j)
beta = sqrt(update_beta2(x, y[,1], T))
beta2 = c(beta2, beta^2)
}
x11()
qplot(sigma2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Sigma")
x11()
qplot(beta2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Beta")
rm(list=ls())
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task5")
source("task5_functions.R")
library(invgamma)
library(pscl)
library(ggplot2)
T = 500
N = 100
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma = 0.1315
beta = 0.63715
X_smc = smc_tot(sigma, phi, beta, T)
j = sample(1:N, 1)
x = X_smc[,j]
for (i in 1:N){
sigma = sqrt(update_sigma2(x, phi, T))
sigma2 = c(sigma2, sigma^2)
j = sample(1:N, 1)
x = smc(X_smc, i, sigma, phi, beta, T, j)
beta = sqrt(update_beta2(x, y[,1], T))
beta2 = c(beta2, beta^2)
}
x11()
qplot(sigma2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Sigma")
rm(list=ls())
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task5")
source("task5_functions.R")
T = 500
N = 100
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma = 0.1315
beta = 0.63715
X_smc = smc_tot(sigma, phi, beta, T)
# j = sample(1:N, 1)
# x = X_smc[,j]
x = array(0,T+1)
x[1] =  rnorm(1, 0, sqrt(sigma^2/(1-phi^2)))
for (t in 2:(T+1))
x[t] = rnorm(1, phi*x[t-1], sigma)
for (i in 1:N){
sigma = sqrt(update_sigma2(x, phi, T))
sigma2 = c(sigma2, sigma^2)
j = sample(1:N, 1)
x = smc(X_smc, i, sigma, phi, beta, T, j)
beta = sqrt(update_beta2(x, y[,1], T))
beta2 = c(beta2, beta^2)
}
x11()
qplot(sigma2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Sigma")
setwd("C:/Users/Vale/Dropbox/Poli/Erasmus/KTH/Statitical Methods for Applied Computer Science/DD2447_2017/task5")
source("task5_functions.R")
T = 500
N = 100
phi = 0.951934
X = NULL        # will have dimension TXN
sigma2 = NULL   # will have dimension 1xN
beta2 = NULL    # will have dimension 1xN
y = read.table("output.txt")
# Initialization of sigma2 and X:
# sigma is initialized to its correct value
# X is the matrix representing the results of each step of SMC
sigma = 0.1315
beta = 0.63715
X_smc = smc_tot(sigma, phi, beta, T)
x = array(0,T+1)
x[1] =  rnorm(1, 0, sqrt(sigma^2/(1-phi^2)))
for (t in 2:(T+1))
x[t] = rnorm(1, phi*x[t-1], sigma)
for (i in 1:N){
sigma = sqrt(update_sigma2(x, phi, T))
sigma2 = c(sigma2, sigma^2)
j = sample(1:N, 1)
x = smc(X_smc, i, sigma, phi, beta, T, j)
beta = sqrt(update_beta2(x, y[,1], T))
beta2 = c(beta2, beta^2)
}
x11()
qplot(sigma2, geom="histogram", fill=I("blue"), col=I("grey"), main="Marginal distribution for Sigma")
